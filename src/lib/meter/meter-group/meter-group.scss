@use '../../core/styles/shape';
@use '../../core/styles/spacing';
@use '../meter';
@use './core';

//
// Host
//

:host {
  @include core.host;
}

//
// Base
//

.forge-meter-group {
  @include core.tokens;
}

.forge-meter-group {
  @include core.base;

  .heading {
    @include core.heading;

    &.not-empty {
      @include core.heading-with-content;
    }
  }

  .label {
    @include core.label;
  }

  .value {
    @include core.value;
  }

  .track {
    @include core.track;

    ::slotted(forge-meter) {
      position: static !important;
    }

    &.tickmarks::after {
      @include core.tickmarks;
    }
  }
}

:host([muted]) {
  .forge-meter-group {
    @include core.muted;
  }
}

//
// Vertical
//

:host([direction='block']) {
  @include core.vertical-host;

  .forge-meter-group {
    @include core.vertical-base;

    .heading {
      @include core.vertical-heading;

      &.not-empty {
        @include core.vertical-heading-with-content;
      }
    }

    .track {
      @include core.vertical-track;

      &.tickmarks::after {
        @include core.vertical-tickmarks;
      }
    }
  }
}

//
// Density
//

@each $key, $value in ('small': 'xsmall', 'medium': 'medium', 'large': 'large') {
  :host([density='#{$key}']) {
    .track {
      @include core.override(height, spacing.variable($value), value);
    }
  }
}

//
// Shape
//

@each $key, $value in ('default': shape.variable(medium), 'rounded': shape.variable(full), 'squared': 0) {
  :host([shape='#{$key}']) {
    .track {
      @include core.override(shape, $value, value);
    }
  }
}

:host([inner-shape='inherit']) {
  .track {
    @include meter.provide-theme(
      (
        inner-shape: #{core.token(shape)}
      )
    );
  }
}

//
// Media
//

@media (forced-colors: active) {
  .track {
    border: 1px solid CanvasText;
  }
}
